/**
 * Handling detection results
 */
import { HttpClient } from '../client/types';
import { AllMediaResponse, MediaResponse } from '../types';
import { DetectionResult, DetectionOptions, DetectionResultList } from '../types';
/**
 * Get the raw media result from the API
 * @param client HTTP client
 * @param requestId Request ID
 * @returns Raw media response
 */
export declare function getMediaResult(client: HttpClient, requestId: string): Promise<MediaResponse>;
export declare function getMediaResults(client: HttpClient, pageNumber?: number, size?: number, name?: string | null, startDate?: Date | null, endDate?: Date | null): Promise<AllMediaResponse>;
/**
 * Format the raw API response into a user-friendly result
 * @param response Raw API response
 * @returns Simplified detection result
 */
export declare function formatResult(response: MediaResponse): DetectionResult;
/**
 * Format the all media API response into a user-friendly result
 * @param response Raw API response
 * @returns Simplified detection result list
 */
export declare function formatResults(response: AllMediaResponse): DetectionResultList;
/**
 * Get detection results for a media request
 * @param client HTTP client
 * @param requestId Request ID
 * @param options Detection options for polling configuration
 * @returns Detection results
 */
export declare function getDetectionResult(client: HttpClient, requestId: string, options?: Partial<DetectionOptions>): Promise<DetectionResult>;
export declare function getDetectionResults(client: HttpClient, pageNumber?: number, size?: number, name?: string | null, startDate?: Date | null, endDate?: Date | null, options?: Partial<DetectionOptions>): Promise<DetectionResultList>;
