"use strict";
/**
 * Event handling for the SDK
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedEventEmitter = void 0;
const events_1 = __importDefault(require("events"));
/**
 * Enhanced EventEmitter with typed event handling
 */
class TypedEventEmitter extends events_1.default {
    /**
     * Register an event handler with typed parameters
     * @param event Event name
     * @param listener Event handler function
     * @returns this (for chaining)
     */
    on(event, listener) {
        return super.on(event, listener);
    }
    /**
     * Emit an event with typed parameters
     * @param event Event name
     * @param args Event arguments
     * @returns Whether the event had listeners
     */
    emit(event, ...args) {
        return super.emit(event, ...args);
    }
    /**
     * Remove all listeners for all events, or for a specific event
     * @param event Optional event name
     * @returns this (for chaining)
     */
    removeAllListeners(event) {
        return super.removeAllListeners(event);
    }
}
exports.TypedEventEmitter = TypedEventEmitter;
