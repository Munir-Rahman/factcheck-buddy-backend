/**
 * Event handling for the SDK
 */
import EventEmitter from 'events';
import { RealityDefenderEvents, EventName } from '../types/events';
/**
 * Enhanced EventEmitter with typed event handling
 */
export declare class TypedEventEmitter extends EventEmitter {
    /**
     * Register an event handler with typed parameters
     * @param event Event name
     * @param listener Event handler function
     * @returns this (for chaining)
     */
    on<K extends EventName>(event: K, listener: RealityDefenderEvents[K]): this;
    /**
     * Emit an event with typed parameters
     * @param event Event name
     * @param args Event arguments
     * @returns Whether the event had listeners
     */
    emit<K extends EventName>(event: K, ...args: Parameters<RealityDefenderEvents[K]>): boolean;
    /**
     * Remove all listeners for all events, or for a specific event
     * @param event Optional event name
     * @returns this (for chaining)
     */
    removeAllListeners(event?: string): this;
}
